import os.path
from abc import ABC

from {{ package_name }}.handler import api
from {{ package_name }}.service import {{ sql_name }}
from {{ package_name }}.authorize import authorize
from easy_api.schema import SqlResult, response_schema, request_schema
from easy_api.service.export import export_xlsx_file
from easy_api.web import Handler

file_dir = os.path.dirname(os.path.abspath(__file__))
schema_file = os.path.join(file_dir, "schema/{{ sql_name }}.json")
export_xlsx = {{ export_xlsx }}


@api('/{{ sql_name }}')
class {{ sql_name.title().replace('_', '') }}Handler(Handler, ABC):

    @authorize("{{ package_name }}", "{{ sql_name }}")
    @response_schema(SqlResult)
    @request_schema("input_dict", schema_file=schema_file)
    async def {{ method.lower() }}(self, input_dict: dict) -> SqlResult:
        """
        ---
        tags: [{{ package_name }}]
        summary: {{ nickname }}
        """
        return await {{ sql_name }}.run(input_dict)


{% if export_xlsx %}
@api('/{{ sql_name }}.xlsx')
class {{ sql_name.title().replace('_', '') }}Handler(Handler, ABC):

    @authorize("{{ package_name }}", "{{ sql_name }}")
    @request_schema("input_dict", schema_file=schema_file)
    async def get(self, input_dict: dict):
        """
        ---
        tags: [{{ package_name }}]
        summary: export xlsx file from {{ sql_name }} api
        """
        result = await {{ sql_name }}.run(input_dict)
        file_name = self.request.headers.get('export_xlsx_file_name', "export")
        header = self.request.headers.get('export_xlsx_header', None)
        if header is None and isinstance(export_xlsx, str):
            header = export_xlsx
        await export_xlsx_file(self, result.data, file_name, header)
{% endif %}